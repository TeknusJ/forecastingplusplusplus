{"ast":null,"code":"var _jsxFileName = \"/Users/johnteknus/Desktop/cfapacity-dashboard/src/components/ConsultantCapacityDashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport Papa from 'papaparse';\nimport _ from 'lodash';\nimport { Upload, ChevronDown, ChevronUp } from 'lucide-react'; // Removed unused 'Download' icon\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ROLE_WEIGHTS = {\n  'Lead': 1,\n  'Co-Lead': 0.7,\n  'Strategic Advisor': 0.3,\n  'Supporting': 0.5\n};\nconst PIPELINE_STAGE_WEIGHTS = {\n  'On Hold and Introductory Meeting': 0.1,\n  'Proposal Requested': 0.3,\n  'Proposal Under Review': 0.5,\n  'LOE Requested': 0.7,\n  'LOE Under Review': 0.9,\n  'Prospect': 0.4,\n  'Active': 1,\n  'Follow On': 0.95\n};\nconst MAX_RECOMMENDED_LOAD = 8;\nconst ConsultantCapacityDashboard = () => {\n  _s();\n  const [consultantData, setConsultantData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [expandedConsultant, setExpandedConsultant] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [removePipelineWork, setRemovePipelineWork] = useState(false);\n  const [internalWorkAdjustments, setInternalWorkAdjustments] = useState({});\n  const handleInternalWorkChange = (consultantName, value) => {\n    setInternalWorkAdjustments(prev => ({\n      ...prev,\n      [consultantName]: value\n    }));\n  };\n  const [filters, setFilters] = useState({\n    businessLine: 'all',\n    timeframe: 'all',\n    capacityStatus: 'all',\n    consultantSearch: ''\n  });\n  const calculateWeightedLoad = projects => {\n    return projects.reduce((total, project) => {\n      const roleWeight = ROLE_WEIGHTS[project.role] || 0;\n      const stageWeight = PIPELINE_STAGE_WEIGHTS[project.dealStage] || 0;\n      const followOnWeight = project.projectName.includes('-Follow On') ? 0.95 : 1;\n      return total + roleWeight * stageWeight * followOnWeight;\n    }, 0);\n  };\n  const generateMonthlyTimeline = (projects, internalWorkPercentage) => {\n    const months = [];\n    const today = new Date();\n    for (let i = 0; i < 12; i++) {\n      const month = new Date(today.getFullYear(), today.getMonth() + i, 1);\n      months.push(month);\n    }\n    return months.map(month => {\n      const activeProjects = projects.filter(project => {\n        const startDate = new Date(project.startDate);\n        const endDate = new Date(project.endDate);\n        return !isNaN(startDate) && !isNaN(endDate) && month >= startDate && month <= endDate;\n      });\n      const weightedLoad = calculateWeightedLoad(activeProjects);\n      const adjustedCapacity = Math.max(0, MAX_RECOMMENDED_LOAD * (1 - internalWorkPercentage / 100) - weightedLoad);\n      return {\n        month: month.toLocaleString('default', {\n          month: 'short',\n          year: '2-digit'\n        }),\n        projects: activeProjects.length,\n        weightedLoad: parseFloat(weightedLoad.toFixed(1)),\n        capacity: parseFloat(adjustedCapacity.toFixed(1)),\n        details: activeProjects.map(p => ({\n          name: p.projectName,\n          role: p.role,\n          businessLine: p.businessLine\n        }))\n      };\n    });\n  };\n  const processData = parsedData => {\n    try {\n      const splitConsultants = str => str ? str.split(';').map(s => s.trim()).filter(Boolean) : [];\n      const projectsByConsultant = {};\n      parsedData.data.forEach(project => {\n        const processRole = (names, role) => {\n          splitConsultants(names).forEach(name => {\n            if (!projectsByConsultant[name]) {\n              projectsByConsultant[name] = [];\n            }\n            projectsByConsultant[name].push({\n              projectName: project['Deal Name'],\n              role: role,\n              startDate: project['Contract Start Date'],\n              endDate: project['Contract End Date'],\n              businessLine: project['Primary Business Line'],\n              dealStage: project['Deal Stage']\n            });\n          });\n        };\n        processRole(project['Project Lead'], 'Lead');\n        processRole(project['Project Co-Lead'], 'Co-Lead');\n        processRole(project['Project Strategic Advisors'], 'Strategic Advisor');\n        processRole(project['Project Supporting Consultants'], 'Supporting');\n      });\n      const consultantsWithTimeline = Object.entries(projectsByConsultant).map(([name, projects]) => {\n        const internalWorkPercentage = internalWorkAdjustments[name] || 0;\n        return {\n          name,\n          projects: _.uniqBy(projects, 'projectName'),\n          timeline: generateMonthlyTimeline(projects, internalWorkPercentage),\n          currentLoad: projects.filter(p => {\n            const now = new Date();\n            const startDate = new Date(p.startDate);\n            const endDate = new Date(p.endDate);\n            return !isNaN(startDate) && !isNaN(endDate) && now >= startDate && now <= endDate;\n          }).length\n        };\n      }).sort((a, b) => b.currentLoad - a.currentLoad);\n      setConsultantData(consultantsWithTimeline);\n      setFilteredData(consultantsWithTimeline);\n    } catch (err) {\n      setError('Error processing data: ' + err.message);\n      setIsLoading(false);\n    }\n  };\n  const handleFileUpload = event => {\n    setIsLoading(true);\n    setError(null);\n    const file = event.target.files[0];\n    if (file) {\n      Papa.parse(file, {\n        header: true,\n        dynamicTyping: true,\n        skipEmptyLines: true,\n        complete: results => {\n          processData(results);\n          setIsLoading(false);\n        },\n        error: error => {\n          setError('Error parsing CSV: ' + error.message);\n          setIsLoading(false);\n        }\n      });\n    } else {\n      setIsLoading(false);\n    }\n  };\n  const toggleConsultant = consultantName => {\n    setExpandedConsultant(expandedConsultant === consultantName ? null : consultantName);\n  };\n  useEffect(() => {\n    const applyFilters = () => {\n      let filtered = [...consultantData];\n      if (removePipelineWork) {\n        filtered = filtered.map(consultant => ({\n          ...consultant,\n          projects: consultant.projects.filter(project => project.dealStage === 'Active')\n        }));\n      }\n      if (filters.businessLine !== 'all') {\n        filtered = filtered.map(consultant => ({\n          ...consultant,\n          projects: consultant.projects.filter(project => project.businessLine === filters.businessLine)\n        }));\n      }\n      if (filters.timeframe !== 'all') {\n        const months = parseInt(filters.timeframe);\n        const cutoffDate = new Date();\n        cutoffDate.setMonth(cutoffDate.getMonth() + months);\n        filtered = filtered.map(consultant => ({\n          ...consultant,\n          projects: consultant.projects.filter(project => {\n            const endDate = new Date(project.endDate);\n            return endDate <= cutoffDate;\n          })\n        }));\n      }\n      if (filters.capacityStatus !== 'all') {\n        filtered = filtered.filter(consultant => {\n          const currentLoad = consultant.timeline[0].weightedLoad;\n          switch (filters.capacityStatus) {\n            case 'available':\n              return currentLoad < MAX_RECOMMENDED_LOAD * 0.8;\n            case 'at-capacity':\n              return currentLoad >= MAX_RECOMMENDED_LOAD * 0.8 && currentLoad <= MAX_RECOMMENDED_LOAD;\n            case 'over-capacity':\n              return currentLoad > MAX_RECOMMENDED_LOAD;\n            default:\n              return true;\n          }\n        });\n      }\n      if (filters.consultantSearch) {\n        filtered = filtered.filter(consultant => consultant.name.toLowerCase().includes(filters.consultantSearch.toLowerCase()));\n      }\n      setFilteredData(filtered);\n    };\n    applyFilters();\n  }, [filters, consultantData, removePipelineWork]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 bg-gray-50 min-h-screen\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this);\n};\n_s(ConsultantCapacityDashboard, \"UzEl0fMwihPBYqpYj38kjc8oMBo=\");\n_c = ConsultantCapacityDashboard;\nexport default ConsultantCapacityDashboard;\nvar _c;\n$RefreshReg$(_c, \"ConsultantCapacityDashboard\");","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Papa","_","Upload","ChevronDown","ChevronUp","jsxDEV","_jsxDEV","ROLE_WEIGHTS","PIPELINE_STAGE_WEIGHTS","MAX_RECOMMENDED_LOAD","ConsultantCapacityDashboard","_s","consultantData","setConsultantData","filteredData","setFilteredData","expandedConsultant","setExpandedConsultant","isLoading","setIsLoading","error","setError","removePipelineWork","setRemovePipelineWork","internalWorkAdjustments","setInternalWorkAdjustments","handleInternalWorkChange","consultantName","value","prev","filters","setFilters","businessLine","timeframe","capacityStatus","consultantSearch","calculateWeightedLoad","projects","reduce","total","project","roleWeight","role","stageWeight","dealStage","followOnWeight","projectName","includes","generateMonthlyTimeline","internalWorkPercentage","months","today","Date","i","month","getFullYear","getMonth","push","map","activeProjects","filter","startDate","endDate","isNaN","weightedLoad","adjustedCapacity","Math","max","toLocaleString","year","length","parseFloat","toFixed","capacity","details","p","name","processData","parsedData","splitConsultants","str","split","s","trim","Boolean","projectsByConsultant","data","forEach","processRole","names","consultantsWithTimeline","Object","entries","uniqBy","timeline","currentLoad","now","sort","a","b","err","message","handleFileUpload","event","file","target","files","parse","header","dynamicTyping","skipEmptyLines","complete","results","toggleConsultant","applyFilters","filtered","consultant","parseInt","cutoffDate","setMonth","toLowerCase","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/johnteknus/Desktop/cfapacity-dashboard/src/components/ConsultantCapacityDashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n} from 'recharts';\nimport Papa from 'papaparse';\nimport _ from 'lodash';\nimport { Upload, ChevronDown, ChevronUp } from 'lucide-react'; // Removed unused 'Download' icon\n\nconst ROLE_WEIGHTS = {\n  'Lead': 1,\n  'Co-Lead': 0.7,\n  'Strategic Advisor': 0.3,\n  'Supporting': 0.5\n};\n\nconst PIPELINE_STAGE_WEIGHTS = {\n  'On Hold and Introductory Meeting': 0.1,\n  'Proposal Requested': 0.3,\n  'Proposal Under Review': 0.5,\n  'LOE Requested': 0.7,\n  'LOE Under Review': 0.9,\n  'Prospect': 0.4,\n  'Active': 1,\n  'Follow On': 0.95\n};\n\nconst MAX_RECOMMENDED_LOAD = 8;\n\nconst ConsultantCapacityDashboard = () => {\n  const [consultantData, setConsultantData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [expandedConsultant, setExpandedConsultant] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [removePipelineWork, setRemovePipelineWork] = useState(false);\n  const [internalWorkAdjustments, setInternalWorkAdjustments] = useState({});\n\n  const handleInternalWorkChange = (consultantName, value) => {\n    setInternalWorkAdjustments(prev => ({\n      ...prev,\n      [consultantName]: value\n    }));\n  };\n\n  const [filters, setFilters] = useState({\n    businessLine: 'all',\n    timeframe: 'all',\n    capacityStatus: 'all',\n    consultantSearch: ''\n  });\n\n  const calculateWeightedLoad = (projects) => {\n    return projects.reduce((total, project) => {\n      const roleWeight = ROLE_WEIGHTS[project.role] || 0;\n      const stageWeight = PIPELINE_STAGE_WEIGHTS[project.dealStage] || 0;\n      const followOnWeight = project.projectName.includes('-Follow On') ? 0.95 : 1;\n      return total + roleWeight * stageWeight * followOnWeight;\n    }, 0);\n  };\n\n  const generateMonthlyTimeline = (projects, internalWorkPercentage) => {\n    const months = [];\n    const today = new Date();\n\n    for (let i = 0; i < 12; i++) {\n      const month = new Date(today.getFullYear(), today.getMonth() + i, 1);\n      months.push(month);\n    }\n\n    return months.map(month => {\n      const activeProjects = projects.filter(project => {\n        const startDate = new Date(project.startDate);\n        const endDate = new Date(project.endDate);\n        return (!isNaN(startDate) && !isNaN(endDate)) &&\n          (month >= startDate && month <= endDate);\n      });\n\n      const weightedLoad = calculateWeightedLoad(activeProjects);\n      const adjustedCapacity = Math.max(0, MAX_RECOMMENDED_LOAD * (1 - internalWorkPercentage / 100) - weightedLoad);\n\n      return {\n        month: month.toLocaleString('default', { month: 'short', year: '2-digit' }),\n        projects: activeProjects.length,\n        weightedLoad: parseFloat(weightedLoad.toFixed(1)),\n        capacity: parseFloat(adjustedCapacity.toFixed(1)),\n        details: activeProjects.map(p => ({\n          name: p.projectName,\n          role: p.role,\n          businessLine: p.businessLine\n        }))\n      };\n    });\n  };\n\n  const processData = (parsedData) => {\n    try {\n      const splitConsultants = (str) => str ? str.split(';').map(s => s.trim()).filter(Boolean) : [];\n\n      const projectsByConsultant = {};\n      parsedData.data.forEach(project => {\n        const processRole = (names, role) => {\n          splitConsultants(names).forEach(name => {\n            if (!projectsByConsultant[name]) {\n              projectsByConsultant[name] = [];\n            }\n            projectsByConsultant[name].push({\n              projectName: project['Deal Name'],\n              role: role,\n              startDate: project['Contract Start Date'],\n              endDate: project['Contract End Date'],\n              businessLine: project['Primary Business Line'],\n              dealStage: project['Deal Stage']\n            });\n          });\n        };\n\n        processRole(project['Project Lead'], 'Lead');\n        processRole(project['Project Co-Lead'], 'Co-Lead');\n        processRole(project['Project Strategic Advisors'], 'Strategic Advisor');\n        processRole(project['Project Supporting Consultants'], 'Supporting');\n      });\n\n      const consultantsWithTimeline = Object.entries(projectsByConsultant)\n        .map(([name, projects]) => {\n          const internalWorkPercentage = internalWorkAdjustments[name] || 0;\n          return {\n            name,\n            projects: _.uniqBy(projects, 'projectName'),\n            timeline: generateMonthlyTimeline(projects, internalWorkPercentage),\n            currentLoad: projects.filter(p => {\n              const now = new Date();\n              const startDate = new Date(p.startDate);\n              const endDate = new Date(p.endDate);\n              return (!isNaN(startDate) && !isNaN(endDate)) &&\n                (now >= startDate && now <= endDate);\n            }).length\n          };\n        })\n        .sort((a, b) => b.currentLoad - a.currentLoad);\n\n      setConsultantData(consultantsWithTimeline);\n      setFilteredData(consultantsWithTimeline);\n    } catch (err) {\n      setError('Error processing data: ' + err.message);\n      setIsLoading(false);\n    }\n  };\n\n  const handleFileUpload = (event) => {\n    setIsLoading(true);\n    setError(null);\n    const file = event.target.files[0];\n\n    if (file) {\n      Papa.parse(file, {\n        header: true,\n        dynamicTyping: true,\n        skipEmptyLines: true,\n        complete: (results) => {\n          processData(results);\n          setIsLoading(false);\n        },\n        error: (error) => {\n          setError('Error parsing CSV: ' + error.message);\n          setIsLoading(false);\n        }\n      });\n    } else {\n      setIsLoading(false);\n    }\n  };\n\n  const toggleConsultant = (consultantName) => {\n    setExpandedConsultant(expandedConsultant === consultantName ? null : consultantName);\n  };\n\n  useEffect(() => {\n    const applyFilters = () => {\n      let filtered = [...consultantData];\n\n      if (removePipelineWork) {\n        filtered = filtered.map(consultant => ({\n          ...consultant,\n          projects: consultant.projects.filter(project =>\n            project.dealStage === 'Active'\n          )\n        }));\n      }\n\n      if (filters.businessLine !== 'all') {\n        filtered = filtered.map(consultant => ({\n          ...consultant,\n          projects: consultant.projects.filter(project =>\n            project.businessLine === filters.businessLine\n          )\n        }));\n      }\n\n      if (filters.timeframe !== 'all') {\n        const months = parseInt(filters.timeframe);\n        const cutoffDate = new Date();\n        cutoffDate.setMonth(cutoffDate.getMonth() + months);\n\n        filtered = filtered.map(consultant => ({\n          ...consultant,\n          projects: consultant.projects.filter(project => {\n            const endDate = new Date(project.endDate);\n            return endDate <= cutoffDate;\n          })\n        }));\n      }\n\n      if (filters.capacityStatus !== 'all') {\n        filtered = filtered.filter(consultant => {\n          const currentLoad = consultant.timeline[0].weightedLoad;\n          switch (filters.capacityStatus) {\n            case 'available':\n              return currentLoad < MAX_RECOMMENDED_LOAD * 0.8;\n            case 'at-capacity':\n              return currentLoad >= MAX_RECOMMENDED_LOAD * 0.8 && currentLoad <= MAX_RECOMMENDED_LOAD;\n            case 'over-capacity':\n              return currentLoad > MAX_RECOMMENDED_LOAD;\n            default:\n              return true;\n          }\n        });\n      }\n\n      if (filters.consultantSearch) {\n        filtered = filtered.filter(consultant =>\n          consultant.name.toLowerCase().includes(filters.consultantSearch.toLowerCase())\n        );\n      }\n\n      setFilteredData(filtered);\n    };\n\n    applyFilters();\n  }, [filters, consultantData, removePipelineWork]);\n\n  return (\n    <div className=\"p-6 bg-gray-50 min-h-screen\">\n      {/* Remaining UI Components */}\n    </div>\n  );\n};\n\nexport default ConsultantCapacityDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}